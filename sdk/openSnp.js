import localforage from 'https://cdn.skypack.dev/localforage';
import {pgsCatalog,pgsScores} from "../pgsScores.js"
import {pgs} from "../pgs.js"

let openSnpDb = localforage.createInstance({ name: "openSnpDb",  storeName: "users"})
let users23 = localforage.createInstance({ name: "users23",  storeName: "users23Txt"})

// 23andme urls
let users = await getUrls()
let usersFiltered = await filterUrls(users)
let userUrls = (usersFiltered.slice(0,4)).map(x=> x["genotype.download_url"])

// 23andme text
let genomes = await get23(userUrls)


let data ={}
data.pgs = pgsScores
data.my23 = genomes


//---------------------------------------------------------------------
// get all users with genotype data (23andMe, illumina, ancestry etc)-------------------------------
async function getUrls() { // opensnp user data includes ancestry, familtyTree, and 23and me genotype data
    let dt = await openSnpDb.getItem('usersFull'); // check for users in localstorage
    if (dt == null ) {
        let users = (await (await fetch('https://corsproxy.io/?https://opensnp.org/users.json')).json())
        let dt2 = users.sort((a,b) => a.id - b.id)
          dt =  openSnpDb.setItem('usersFull', dt2)
        }
      return dt
    }

// filter users without 23andme/ancestry data---------------------------------------------------------
async function filterUrls(users){
  let dt
  let arr = []
  dt = await openSnpDb.getItem('users23andMe_2'); // check local storage for user data 
  
  if (dt == null ) {
    users.filter(row => row.genotypes.length >0).map(dt => {    
          
            // keep user with one or more 23andme files
            dt.genotypes.map(i=>{
              if (dt.genotypes.length > 0 && i.filetype == "23andme"){
                let innerObj = {};
                innerObj["name"] = dt["name"];
                innerObj["id"] = dt["id"];
                innerObj["genotype.id"] = i.id;
                innerObj["genotype.filetype"] = i.filetype;
                innerObj["genotype.download_url"] = i.download_url.replace("http","https")
                arr.push(innerObj)

                } 
        })
      })
        dt = arr//.filter(x=> x.genotypes.length != 0)
        openSnpDb.setItem('users23andMe_2', dt)
      }
      return dt
 }

// get 23andme text file from user url--------------------------------------------------------

async function get23(urls) {
  let data = []
  console.log("getting data from", urls.length, "23andMe urls:", urls)
  for (let i = 0; i < urls.length; i++) {
    let user = await users23.getItem(urls[i]);

    if (user == null) {
      let url2 = 'https://corsproxy.io/?' + urls[i]
      user = (await (await fetch(url2)).text())

      users23.setItem(urls[i], user);
    }
    console.log("--------------23andMe file url:", urls[i], "--------------")
    console.log("checking 23and me file:  ", '"', user.substring(0, 37), '"')

    if (user.substring(0, 37) == '# This data file generated by 23andMe') {
      console.log("This is a valid 23andMe file:")
      let parsedUser = await pgs.parse23(user, urls[i])
      data.push(parsedUser)
    } else {
      console.log("This is NOT a valid 23andMe file:")
    }
  }
  return data
}

//--------------------------------------------------------------------------------------------------------------

export{data}




